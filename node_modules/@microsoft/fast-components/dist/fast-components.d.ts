import { Accordion } from '@microsoft/fast-foundation';
import { AccordionItem } from '@microsoft/fast-foundation';
import { AccordionItemOptions } from '@microsoft/fast-foundation';
import { Anchor as Anchor_2 } from '@microsoft/fast-foundation';
import { AnchoredRegion } from '@microsoft/fast-foundation';
import { AnchorOptions } from '@microsoft/fast-foundation';
import { Avatar as Avatar_2 } from '@microsoft/fast-foundation';
import { AvatarOptions } from '@microsoft/fast-foundation';
import { Badge } from '@microsoft/fast-foundation';
import { BaseProgress } from '@microsoft/fast-foundation';
import { Behavior } from '@microsoft/fast-element';
import { Breadcrumb } from '@microsoft/fast-foundation';
import { BreadcrumbItem } from '@microsoft/fast-foundation';
import { BreadcrumbItemOptions } from '@microsoft/fast-foundation';
import { Button as Button_2 } from '@microsoft/fast-foundation';
import { ButtonOptions } from '@microsoft/fast-foundation';
import { Calendar } from '@microsoft/fast-foundation';
import { CalendarOptions } from '@microsoft/fast-foundation';
import { Card as Card_2 } from '@microsoft/fast-foundation';
import { Checkbox } from '@microsoft/fast-foundation';
import { CheckboxOptions } from '@microsoft/fast-foundation';
import { Combobox as Combobox_2 } from '@microsoft/fast-foundation';
import { ComboboxOptions } from '@microsoft/fast-foundation';
import { Constructable } from '@microsoft/fast-element';
import type { Container } from '@microsoft/fast-foundation';
import { CSSDesignToken } from '@microsoft/fast-foundation';
import { DataGrid } from '@microsoft/fast-foundation';
import { DataGridCell } from '@microsoft/fast-foundation';
import { DataGridRow } from '@microsoft/fast-foundation';
import { DesignSystem } from '@microsoft/fast-foundation';
import { DesignToken } from '@microsoft/fast-foundation';
import { Dialog } from '@microsoft/fast-foundation';
import { Direction } from '@microsoft/fast-web-utilities';
import { Disclosure as Disclosure_2 } from '@microsoft/fast-foundation';
import { Divider } from '@microsoft/fast-foundation';
import { ElementDefinitionContext } from '@microsoft/fast-foundation';
import { ElementStyles } from '@microsoft/fast-element';
import { FASTElement } from '@microsoft/fast-element';
import { Flipper } from '@microsoft/fast-foundation';
import { FlipperOptions } from '@microsoft/fast-foundation';
import { FoundationElement } from '@microsoft/fast-foundation';
import { FoundationElementDefinition } from '@microsoft/fast-foundation';
import { FoundationElementRegistry } from '@microsoft/fast-foundation';
import { FoundationElementTemplate } from '@microsoft/fast-foundation';
import { HorizontalScroll as HorizontalScroll_2 } from '@microsoft/fast-foundation';
import { HorizontalScrollOptions } from '@microsoft/fast-foundation';
import { ListboxElement } from '@microsoft/fast-foundation';
import { ListboxOption } from '@microsoft/fast-foundation';
import { ListboxOptionOptions } from '@microsoft/fast-foundation';
import { Menu as Menu_2 } from '@microsoft/fast-foundation';
import { MenuItem } from '@microsoft/fast-foundation';
import { MenuItemOptions } from '@microsoft/fast-foundation';
import { NumberField as NumberField_2 } from '@microsoft/fast-foundation';
import { NumberFieldOptions } from '@microsoft/fast-foundation';
import { OverrideFoundationElementDefinition } from '@microsoft/fast-foundation';
import { Picker } from '@microsoft/fast-foundation';
import { PickerList } from '@microsoft/fast-foundation';
import { PickerListItem } from '@microsoft/fast-foundation';
import { PickerMenu as PickerMenu_2 } from '@microsoft/fast-foundation';
import { PickerMenuOption } from '@microsoft/fast-foundation';
import { ProgressOptions } from '@microsoft/fast-foundation';
import { ProgressRingOptions } from '@microsoft/fast-foundation';
import { Radio } from '@microsoft/fast-foundation';
import { RadioGroup } from '@microsoft/fast-foundation';
import { RadioOptions } from '@microsoft/fast-foundation';
import { Search as Search_2 } from '@microsoft/fast-foundation';
import { SearchOptions } from '@microsoft/fast-foundation';
import { Select as Select_2 } from '@microsoft/fast-foundation';
import { SelectOptions } from '@microsoft/fast-foundation';
import { Skeleton } from '@microsoft/fast-foundation';
import { Slider } from '@microsoft/fast-foundation';
import { SliderLabel as SliderLabel_2 } from '@microsoft/fast-foundation';
import { SliderOptions } from '@microsoft/fast-foundation';
import { Switch } from '@microsoft/fast-foundation';
import { SwitchOptions } from '@microsoft/fast-foundation';
import { Tab } from '@microsoft/fast-foundation';
import { TabPanel } from '@microsoft/fast-foundation';
import { Tabs } from '@microsoft/fast-foundation';
import { TabsOptions } from '@microsoft/fast-foundation';
import { TextArea as TextArea_2 } from '@microsoft/fast-foundation';
import { TextField as TextField_2 } from '@microsoft/fast-foundation';
import { TextFieldOptions } from '@microsoft/fast-foundation';
import { Toolbar as Toolbar_2 } from '@microsoft/fast-foundation';
import { ToolbarOptions } from '@microsoft/fast-foundation';
import { Tooltip } from '@microsoft/fast-foundation';
import { TreeItem } from '@microsoft/fast-foundation';
import { TreeItemOptions } from '@microsoft/fast-foundation';
import { TreeView } from '@microsoft/fast-foundation';
import { ViewTemplate } from '@microsoft/fast-element';

/** @public */
export declare const accentColor: CSSDesignToken<Swatch>;

/** @public */
export declare const accentFillActive: CSSDesignToken<Swatch>;

/** @public */
export declare const accentFillActiveDelta: DesignToken<number>;

/** @public */
export declare const accentFillFocus: CSSDesignToken<Swatch>;

/** @public */
export declare const accentFillFocusDelta: DesignToken<number>;

/** @public */
export declare const accentFillHover: CSSDesignToken<Swatch>;

/** @public */
export declare const accentFillHoverDelta: DesignToken<number>;

/** @public */
export declare const accentFillRecipe: DesignToken<InteractiveColorRecipe>;

/** @public */
export declare const accentFillRest: CSSDesignToken<Swatch>;

/** @public */
export declare const accentFillRestDelta: DesignToken<number>;

/** @public */
export declare const accentForegroundActive: CSSDesignToken<Swatch>;

/** @public */
export declare const accentForegroundActiveDelta: DesignToken<number>;

/** @public */
export declare const accentForegroundFocus: CSSDesignToken<Swatch>;

/** @public */
export declare const accentForegroundFocusDelta: DesignToken<number>;

/** @public */
export declare const accentForegroundHover: CSSDesignToken<Swatch>;

/** @public */
export declare const accentForegroundHoverDelta: DesignToken<number>;

/** @public */
export declare const accentForegroundRecipe: DesignToken<InteractiveColorRecipe>;

/** @public */
export declare const accentForegroundRest: CSSDesignToken<Swatch>;

/** @public */
export declare const accentForegroundRestDelta: DesignToken<number>;

/** @public */
export declare const accentPalette: DesignToken<Palette<Swatch>>;

export { Accordion }

export { AccordionItem }

/**
 * Styles for AccordionItem
 * @public
 */
export declare const accordionItemStyles: FoundationElementTemplate<ElementStyles, AccordionItemOptions>;

/**
 * Styles for Accordion
 * @public
 */
export declare const accordionStyles: FoundationElementTemplate<ElementStyles>;

/**
 * Styles used for the flipper container and gradient fade actions
 * @public
 */
export declare const ActionsStyles: ElementStyles;

/**
 * All Web Components
 * @public
 * @remarks
 * This object can be passed directly to the Design System's `register` method to
 * statically link and register all available components.
 */
export declare const allComponents: {
    fastAccordion: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Accordion, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Accordion, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, Accordion>;
    fastAccordionItem: (overrideDefinition?: OverrideFoundationElementDefinition<AccordionItemOptions> | undefined) => FoundationElementRegistry<AccordionItemOptions, Constructable<FoundationElement>>;
    fastAnchor: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    baseClass: typeof Anchor_2;
    template: FoundationElementTemplate<ViewTemplate<Anchor_2, any>, AnchorOptions>;
    styles: FoundationElementTemplate<ElementStyles, AnchorOptions>;
    shadowOptions: {
    delegatesFocus: true;
    };
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    baseClass: typeof Anchor_2;
    template: FoundationElementTemplate<ViewTemplate<Anchor_2, any>, AnchorOptions>;
    styles: FoundationElementTemplate<ElementStyles, AnchorOptions>;
    shadowOptions: {
    delegatesFocus: true;
    };
    }, Anchor>;
    fastAnchoredRegion: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<AnchoredRegion, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<AnchoredRegion, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, AnchoredRegion>;
    fastAvatar: (overrideDefinition?: OverrideFoundationElementDefinition<AvatarOptions> | undefined) => FoundationElementRegistry<AvatarOptions, Constructable<FoundationElement>>;
    fastBadge: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Badge, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Badge, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, Badge>;
    fastBreadcrumb: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Breadcrumb, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Breadcrumb, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, Breadcrumb>;
    fastBreadcrumbItem: (overrideDefinition?: OverrideFoundationElementDefinition<BreadcrumbItemOptions> | undefined) => FoundationElementRegistry<BreadcrumbItemOptions, Constructable<FoundationElement>>;
    fastButton: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    baseClass: typeof Button_2;
    template: FoundationElementTemplate<ViewTemplate<Button_2, any>, ButtonOptions>;
    styles: FoundationElementTemplate<ElementStyles, ButtonOptions>;
    shadowOptions: {
    delegatesFocus: true;
    };
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    baseClass: typeof Button_2;
    template: FoundationElementTemplate<ViewTemplate<Button_2, any>, ButtonOptions>;
    styles: FoundationElementTemplate<ElementStyles, ButtonOptions>;
    shadowOptions: {
    delegatesFocus: true;
    };
    }, Button>;
    fastCalendar: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Calendar, any>, CalendarOptions>;
    styles: ElementStyles;
    title: ViewTemplate<Calendar, any>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Calendar, any>, CalendarOptions>;
    styles: ElementStyles;
    title: ViewTemplate<Calendar, any>;
    }, Calendar>;
    fastCard: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    baseClass: typeof Card_2;
    template: FoundationElementTemplate<ViewTemplate<Card_2, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    baseClass: typeof Card_2;
    template: FoundationElementTemplate<ViewTemplate<Card_2, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, Card>;
    fastCheckbox: (overrideDefinition?: OverrideFoundationElementDefinition<CheckboxOptions> | undefined) => FoundationElementRegistry<CheckboxOptions, Constructable<FoundationElement>>;
    fastCombobox: (overrideDefinition?: OverrideFoundationElementDefinition<ComboboxOptions> | undefined) => FoundationElementRegistry<ComboboxOptions, Constructable<FoundationElement>>;
    fastDataGrid: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<DataGrid, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<DataGrid, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, DataGrid>;
    fastDataGridCell: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<DataGridCell, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<DataGridCell, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, DataGridCell>;
    fastDataGridRow: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<DataGridRow, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<DataGridRow, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, DataGridRow>;
    fastDesignSystemProvider: (overrideDefinition?: OverrideFoundationElementDefinition<FoundationElementDefinition> | undefined) => FoundationElementRegistry<FoundationElementDefinition, typeof DesignSystemProvider>;
    fastDialog: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Dialog, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Dialog, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, Dialog>;
    fastDisclosure: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    baseClass: typeof Disclosure_2;
    template: FoundationElementTemplate<ViewTemplate<Disclosure_2, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    baseClass: typeof Disclosure_2;
    template: FoundationElementTemplate<ViewTemplate<Disclosure_2, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, Disclosure>;
    fastDivider: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Divider, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Divider, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, Divider>;
    fastFlipper: (overrideDefinition?: OverrideFoundationElementDefinition<FlipperOptions> | undefined) => FoundationElementRegistry<FlipperOptions, Constructable<FoundationElement>>;
    fastHorizontalScroll: (overrideDefinition?: OverrideFoundationElementDefinition<HorizontalScrollOptions> | undefined) => FoundationElementRegistry<HorizontalScrollOptions, Constructable<FoundationElement>>;
    fastListbox: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    baseClass: typeof ListboxElement;
    template: FoundationElementTemplate<ViewTemplate<ListboxElement, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    baseClass: typeof ListboxElement;
    template: FoundationElementTemplate<ViewTemplate<ListboxElement, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, Listbox>;
    fastOption: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<ListboxOption, any>, ListboxOptionOptions>;
    styles: FoundationElementTemplate<ElementStyles, ListboxOptionOptions>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<ListboxOption, any>, ListboxOptionOptions>;
    styles: FoundationElementTemplate<ElementStyles, ListboxOptionOptions>;
    }, ListboxOption>;
    fastMenu: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Menu_2, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Menu_2, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, Menu>;
    fastMenuItem: (overrideDefinition?: OverrideFoundationElementDefinition<MenuItemOptions> | undefined) => FoundationElementRegistry<MenuItemOptions, Constructable<FoundationElement>>;
    fastNumberField: (overrideDefinition?: OverrideFoundationElementDefinition<NumberFieldOptions> | undefined) => FoundationElementRegistry<NumberFieldOptions, Constructable<FoundationElement>>;
    fastPicker: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Picker, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    shadowOptions: {};
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Picker, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    shadowOptions: {};
    }, Picker>;
    fastPickerList: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<PickerList, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<PickerList, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, PickerList>;
    fastPickerListItem: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<PickerListItem, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<PickerListItem, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, PickerListItem>;
    fastPickerMenu: (overrideDefinition?: OverrideFoundationElementDefinition<FoundationElementDefinition> | undefined) => FoundationElementRegistry<FoundationElementDefinition, Constructable<FoundationElement>>;
    fastPickerMenuOption: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<PickerMenuOption, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<PickerMenuOption, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, PickerMenuOption>;
    fastProgress: (overrideDefinition?: OverrideFoundationElementDefinition<ProgressOptions> | undefined) => FoundationElementRegistry<ProgressOptions, Constructable<FoundationElement>>;
    fastProgressRing: (overrideDefinition?: OverrideFoundationElementDefinition<ProgressRingOptions> | undefined) => FoundationElementRegistry<ProgressRingOptions, Constructable<FoundationElement>>;
    fastRadio: (overrideDefinition?: OverrideFoundationElementDefinition<RadioOptions> | undefined) => FoundationElementRegistry<RadioOptions, Constructable<FoundationElement>>;
    fastRadioGroup: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<RadioGroup, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<RadioGroup, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, RadioGroup>;
    fastSearch: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    baseClass: typeof Search_2;
    template: FoundationElementTemplate<ViewTemplate<Search_2, any>, SearchOptions>;
    styles: FoundationElementTemplate<ElementStyles, TextFieldOptions>;
    shadowOptions: {
    delegatesFocus: true;
    };
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    baseClass: typeof Search_2;
    template: FoundationElementTemplate<ViewTemplate<Search_2, any>, SearchOptions>;
    styles: FoundationElementTemplate<ElementStyles, TextFieldOptions>;
    shadowOptions: {
    delegatesFocus: true;
    };
    }, Search>;
    fastSelect: (overrideDefinition?: OverrideFoundationElementDefinition<SelectOptions> | undefined) => FoundationElementRegistry<SelectOptions, Constructable<FoundationElement>>;
    fastSkeleton: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Skeleton, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Skeleton, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, Skeleton>;
    fastSlider: (overrideDefinition?: OverrideFoundationElementDefinition<SliderOptions> | undefined) => FoundationElementRegistry<SliderOptions, Constructable<FoundationElement>>;
    fastSliderLabel: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    baseClass: typeof SliderLabel_2;
    template: FoundationElementTemplate<ViewTemplate<SliderLabel_2, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    baseClass: typeof SliderLabel_2;
    template: FoundationElementTemplate<ViewTemplate<SliderLabel_2, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, SliderLabel>;
    fastSwitch: (overrideDefinition?: OverrideFoundationElementDefinition<SwitchOptions> | undefined) => FoundationElementRegistry<SwitchOptions, Constructable<FoundationElement>>;
    fastTabs: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Tabs, any>, TabsOptions>;
    styles: FoundationElementTemplate<ElementStyles, TabsOptions>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Tabs, any>, TabsOptions>;
    styles: FoundationElementTemplate<ElementStyles, TabsOptions>;
    }, Tabs>;
    fastTab: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Tab, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<Tab, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, Tab>;
    fastTabPanel: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<TabPanel, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<TabPanel, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, TabPanel>;
    fastTextArea: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    baseClass: typeof TextArea_2;
    template: FoundationElementTemplate<ViewTemplate<TextArea_2, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    shadowOptions: {
    delegatesFocus: true;
    };
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    baseClass: typeof TextArea_2;
    template: FoundationElementTemplate<ViewTemplate<TextArea_2, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    shadowOptions: {
    delegatesFocus: true;
    };
    }, TextArea>;
    fastTextField: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    baseClass: typeof TextField_2;
    template: FoundationElementTemplate<ViewTemplate<TextField_2, any>, TextFieldOptions>;
    styles: FoundationElementTemplate<ElementStyles, TextFieldOptions>;
    shadowOptions: {
    delegatesFocus: true;
    };
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    baseClass: typeof TextField_2;
    template: FoundationElementTemplate<ViewTemplate<TextField_2, any>, TextFieldOptions>;
    styles: FoundationElementTemplate<ElementStyles, TextFieldOptions>;
    shadowOptions: {
    delegatesFocus: true;
    };
    }, TextField>;
    fastTooltip: (overrideDefinition?: OverrideFoundationElementDefinition<FoundationElementDefinition> | undefined) => FoundationElementRegistry<FoundationElementDefinition, Tooltip>;
    fastToolbar: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    baseClass: typeof Toolbar_2;
    template: FoundationElementTemplate<ViewTemplate<Toolbar_2, any>, ToolbarOptions>;
    styles: FoundationElementTemplate<ElementStyles, ToolbarOptions>;
    shadowOptions: {
    delegatesFocus: true;
    };
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    baseClass: typeof Toolbar_2;
    template: FoundationElementTemplate<ViewTemplate<Toolbar_2, any>, ToolbarOptions>;
    styles: FoundationElementTemplate<ElementStyles, ToolbarOptions>;
    shadowOptions: {
    delegatesFocus: true;
    };
    }, Toolbar>;
    fastTreeView: (overrideDefinition?: OverrideFoundationElementDefinition<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<TreeView, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }> | undefined) => FoundationElementRegistry<    {
    baseName: string;
    template: FoundationElementTemplate<ViewTemplate<TreeView, any>, FoundationElementDefinition>;
    styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
    }, TreeView>;
    fastTreeItem: (overrideDefinition?: OverrideFoundationElementDefinition<TreeItemOptions> | undefined) => FoundationElementRegistry<TreeItemOptions, Constructable<FoundationElement>>;
    register(container?: Container | undefined, ...rest: any[]): void;
};

/**
 * Base class for Anchor
 * @public
 */
export declare class Anchor extends Anchor_2 {
    /**
     * The appearance the anchor should have.
     *
     * @public
     * @remarks
     * HTML Attribute: appearance
     */
    appearance?: AnchorAppearance;
    appearanceChanged(oldValue: AnchorAppearance, newValue: AnchorAppearance): void;
    connectedCallback(): void;
    /**
     * Applies 'icon-only' class when there is only an SVG in the default slot
     *
     * @internal
     *
     */
    defaultSlottedContentChanged(oldValue: any, newValue: any): void;
}

/**
 * Types of anchor appearance.
 * @public
 */
export declare type AnchorAppearance = ButtonAppearance | "hypertext";

export { AnchoredRegion }

/**
 * Styles for AnchoredRegion
 * @public
 */
export declare const anchoredRegionStyles: FoundationElementTemplate<ElementStyles>;

/**
 * Styles for Anchor
 * @public
 */
export declare const anchorStyles: FoundationElementTemplate<ElementStyles, AnchorOptions>;

/**
 * The FAST Avatar Class
 * @public
 *
 */
export declare class Avatar extends Avatar_2 {
    /**
     * Indicates the Avatar should have an image source
     *
     * @public
     * @remarks
     * HTML Attribute: src
     */
    imgSrc: string | undefined;
    /**
     * Indicates the Avatar should have alt text
     *
     * @public
     * @remarks
     * HTML Attribute: alt
     */
    alt: string | undefined;
}

/**
 * Styles for Avatar
 * @public
 */
export declare const avatarStyles: FoundationElementTemplate<ElementStyles, AvatarOptions>;

export { Badge }

/**
 * Styles for Badge
 * @public
 */
export declare const badgeStyles: FoundationElementTemplate<ElementStyles>;

/** @public */
export declare const baseHeightMultiplier: CSSDesignToken<number>;

/** @public */
export declare const baseHorizontalSpacingMultiplier: CSSDesignToken<number>;

/** @public */
export declare const baseLayerLuminance: CSSDesignToken<number>;

export { BaseProgress as Progress }
export { BaseProgress as ProgressRing }

/** @public */
export declare const bodyFont: CSSDesignToken<string>;

export { Breadcrumb }

export { BreadcrumbItem }

/**
 * Styles for Breadcrumb item
 * @public
 */
export declare const breadcrumbItemStyles: FoundationElementTemplate<ElementStyles, BreadcrumbItemOptions>;

/**
 * Styles for Breadcrumb
 * @public
 */
export declare const breadcrumbStyles: FoundationElementTemplate<ElementStyles>;

/**
 * @internal
 */
export declare class Button extends Button_2 {
    /**
     * The appearance the button should have.
     *
     * @public
     * @remarks
     * HTML Attribute: appearance
     */
    appearance: ButtonAppearance;
    /**
     * Applies 'icon-only' class when there is only an SVG in the default slot
     *
     * @public
     * @remarks
     */
    defaultSlottedContentChanged(oldValue: any, newValue: any): void;
}

/**
 * Types of button appearance.
 * @public
 */
export declare type ButtonAppearance = "accent" | "lightweight" | "neutral" | "outline" | "stealth";

/**
 * Styles for Button
 * @public
 */
export declare const buttonStyles: FoundationElementTemplate<ElementStyles, ButtonOptions>;

export { Calendar }

/**
 * Styles for Calendar
 * @public
 */
export declare const CalendarStyles: ElementStyles;

/**
 * @internal
 */
export declare class Card extends Card_2 {
    connectedCallback(): void;
}

/**
 * Styles for Card
 * @public
 */
export declare const cardStyles: FoundationElementTemplate<ElementStyles>;

export { Checkbox }

/**
 * Styles for Checkbox
 * @public
 */
export declare const checkboxStyles: FoundationElementTemplate<ElementStyles, CheckboxOptions>;

/** @public */
export declare interface ColorRecipe {
    evaluate(element: HTMLElement, reference?: Swatch): Swatch;
}

/**
 * Base class for Combobox.
 * @public
 */
export declare class Combobox extends Combobox_2 {
    /**
     * An internal stylesheet to hold calculated CSS custom properties.
     *
     * @internal
     */
    private computedStylesheet?;
    /**
     * @internal
     */
    protected maxHeightChanged(prev: number | undefined, next: number): void;
    /**
     * Updates an internal stylesheet with calculated CSS custom properties.
     *
     * @internal
     */
    protected updateComputedStylesheet(): void;
}

/**
 * Styles for Combobox
 * @public
 */
export declare const comboboxStyles: FoundationElementTemplate<ElementStyles, ComboboxOptions>;

/** @public */
export declare const controlCornerRadius: CSSDesignToken<number>;

/**
 * Creates a PaletteRGB from input R, G, B color values.
 * @param r - Red value represented as a number between 0 and 1.
 * @param g - Green value represented as a number between 0 and 1.
 * @param b - Blue value represented as a number between 0 and 1.
 */
declare function create(r: number, g: number, b: number): PaletteRGB;

/**
 * Creates a PaletteRGB from a source SwatchRGB object.
 * @deprecated - Use PaletteRGB.from()
 */
declare function create(source: SwatchRGB): PaletteRGB;

export { DataGrid }

export { DataGridCell }

/**
 * Styles for Data Grid cell
 * @public
 */
export declare const dataGridCellStyles: FoundationElementTemplate<ElementStyles>;

export { DataGridRow }

/**
 * Styles for Data Grid row
 * @public
 */
export declare const dataGridRowStyles: FoundationElementTemplate<ElementStyles>;

/**
 * Styles for Data Grid
 * @public
 */
export declare const dataGridStyles: FoundationElementTemplate<ElementStyles>;

/** @public */
export declare const density: CSSDesignToken<number>;

/**
 * The FAST DesignSystemProvider Element.
 * @internal
 */
export declare class DesignSystemProvider extends FoundationElement {
    constructor();
    /**
     * Used to instruct the FASTDesignSystemProvider
     * that it should not set the CSS
     * background-color and color properties
     *
     * @remarks
     * HTML boolean attribute: no-paint
     */
    noPaint: boolean;
    private noPaintChanged;
    /**
     * Define design system property attributes
     * @remarks
     * HTML attribute: background-color
     *
     * CSS custom property: --fill-color
     */
    fillColor?: Swatch;
    /**
     * Set the accent color
     * @remarks
     * HTML attribute: accent-color
     */
    accentColor?: Swatch;
    /**
     * Set the neutral color
     * @remarks
     * HTML attribute: neutral-color
     */
    neutralColor?: Swatch;
    /**
     *
     * The density offset, used with designUnit to calculate height and spacing.
     *
     * @remarks
     * HTML attribute: density
     *
     * CSS custom property: --density
     */
    density?: number;
    /**
     * The grid-unit that UI dimensions are derived from in pixels.
     *
     * @remarks
     * HTML attribute: design-unit
     *
     * CSS custom property: --design-unit
     */
    designUnit?: number;
    /**
     * The primary document direction.
     *
     * @remarks
     * HTML attribute: direction
     *
     * CSS custom property: N/A
     */
    direction?: Direction;
    /**
     * The number of designUnits used for component height at the base density.
     *
     * @remarks
     * HTML attribute: base-height-multiplier
     *
     * CSS custom property: --base-height-multiplier
     */
    baseHeightMultiplier?: number;
    /**
     * The number of designUnits used for horizontal spacing at the base density.
     *
     * @remarks
     * HTML attribute: base-horizontal-spacing-multiplier
     *
     * CSS custom property: --base-horizontal-spacing-multiplier
     */
    baseHorizontalSpacingMultiplier?: number;
    /**
     * The corner radius applied to controls.
     *
     * @remarks
     * HTML attribute: control-corner-radius
     *
     * CSS custom property: --control-corner-radius
     */
    controlCornerRadius?: number;
    /**
     * The width of the standard stroke applied to stroke components in pixels.
     *
     * @remarks
     * HTML attribute: stroke-width
     *
     * CSS custom property: --stroke-width
     */
    strokeWidth?: number;
    /**
     * The width of the standard focus stroke in pixels.
     *
     * @remarks
     * HTML attribute: focus-stroke-width
     *
     * CSS custom property: --focus-stroke-width
     */
    focusStrokeWidth?: number;
    /**
     * The opacity of a disabled control.
     *
     * @remarks
     * HTML attribute: disabled-opacity
     *
     * CSS custom property: --disabled-opacity
     */
    disabledOpacity?: number;
    /**
     * The font-size two steps below the base font-size
     *
     * @remarks
     * HTML attribute: type-ramp-minus-2-font-size
     *
     * CSS custom property: --type-ramp-minus-2-font-size
     */
    typeRampMinus2FontSize?: string;
    /**
     * The line-height two steps below the base line-height
     *
     * @remarks
     * HTML attribute: type-ramp-minus-2-line-height
     *
     * CSS custom property: --type-ramp-minus-2-line-height
     */
    typeRampMinus2LineHeight?: string;
    /**
     * The font-size one step below the base font-size
     *
     * @remarks
     * HTML attribute: type-ramp-minus-1-font-size
     *
     * CSS custom property: --type-ramp-minus-1-font-size
     */
    typeRampMinus1FontSize?: string;
    /**
     * The line-height one step below the base line-height
     *
     * @remarks
     * HTML attribute: type-ramp-minus-1-line-height
     *
     * CSS custom property: --type-ramp-minus-1-line-height
     */
    typeRampMinus1LineHeight?: string;
    /**
     * The base font-size of the relative type-ramp scale
     *
     * @remarks
     * HTML attribute: type-ramp-base-font-size
     *
     * CSS custom property: --type-ramp-base-font-size
     */
    typeRampBaseFontSize?: string;
    /**
     * The base line-height of the relative type-ramp scale
     *
     * @remarks
     * HTML attribute: type-ramp-base-line-height
     *
     * CSS custom property: --type-ramp-base-line-height
     */
    typeRampBaseLineHeight?: string;
    /**
     * The font-size one step above the base font-size
     *
     * @remarks
     * HTML attribute: type-ramp-plus-1-font-size
     *
     * CSS custom property: --type-ramp-plus-1-font-size
     */
    typeRampPlus1FontSize?: string;
    /**
     * The line-height one step above the base line-height
     *
     * @remarks
     * HTML attribute: type-ramp-plus-1-line-height
     *
     * CSS custom property: --type-ramp-plus-1-line-height
     */
    typeRampPlus1LineHeight?: string;
    /**
     * The font-size two steps above the base font-size
     *
     * @remarks
     * HTML attribute: type-ramp-plus-2-font-size
     *
     * CSS custom property: --type-ramp-plus-2-font-size
     */
    typeRampPlus2FontSize?: string;
    /**
     * The line-height two steps above the base line-height
     *
     * @remarks
     * HTML attribute: type-ramp-plus-2-line-height
     *
     * CSS custom property: --type-ramp-plus-2-line-height
     */
    typeRampPlus2LineHeight?: string;
    /**
     * The font-size three steps above the base font-size
     *
     * @remarks
     * HTML attribute: type-ramp-plus-3-font-size
     *
     * CSS custom property: --type-ramp-plus-3-font-size
     */
    typeRampPlus3FontSize?: string;
    /**
     * The line-height three steps above the base line-height
     *
     * @remarks
     * HTML attribute: type-ramp-plus-3-line-height
     *
     * CSS custom property: --type-ramp-plus-3-line-height
     */
    typeRampPlus3LineHeight?: string;
    /**
     * The font-size four steps above the base font-size
     *
     * @remarks
     * HTML attribute: type-ramp-plus-4-font-size
     *
     * CSS custom property: --type-ramp-plus-4-font-size
     */
    typeRampPlus4FontSize?: string;
    /**
     * The line-height four steps above the base line-height
     *
     * @remarks
     * HTML attribute: type-ramp-plus-4-line-height
     *
     * CSS custom property: --type-ramp-plus-4-line-height
     */
    typeRampPlus4LineHeight?: string;
    /**
     * The font-size five steps above the base font-size
     *
     * @remarks
     * HTML attribute: type-ramp-plus-5-font-size
     *
     * CSS custom property: --type-ramp-plus-5-font-size
     */
    typeRampPlus5FontSize?: string;
    /**
     * The line-height five steps above the base line-height
     *
     * @remarks
     * HTML attribute: type-ramp-plus-5-line-height
     *
     * CSS custom property: --type-ramp-plus-5-line-height
     */
    typeRampPlus5LineHeight?: string;
    /**
     * The font-size six steps above the base font-size
     *
     * @remarks
     * HTML attribute: type-ramp-plus-6-font-size
     *
     * CSS custom property: --type-ramp-plus-6-font-size
     */
    typeRampPlus6FontSize?: string;
    /**
     * The line-height six steps above the base line-height
     *
     * @remarks
     * HTML attribute: type-ramp-plus-6-line-height
     *
     * CSS custom property: --type-ramp-plus-6-line-height
     */
    typeRampPlus6LineHeight?: string;
    /**
     * The distance from the resolved accent fill color for the rest state of the accent-fill recipe. See {@link @microsoft/fast-components#accentFillRest} for usage in CSS.
     *
     * @remarks
     * HTML attribute: accent-fill-rest-delta
     *
     * CSS custom property: N/A
     */
    accentFillRestDelta?: number;
    /**
     * The distance from the resolved accent fill color for the hover state of the accent-fill recipe. See {@link @microsoft/fast-components#accentFillHover} for usage in CSS.
     *
     * @remarks
     * HTML attribute: accent-fill-hover-delta
     *
     * CSS custom property: N/A
     */
    accentFillHoverDelta?: number;
    /**
     * The distance from the resolved accent fill color for the active state of the accent-fill recipe. See {@link @microsoft/fast-components#accentFillActive} for usage in CSS.
     *
     * @remarks
     * HTML attribute: accent-fill-active-delta
     *
     * CSS custom property: N/A
     */
    accentFillActiveDelta?: number;
    /**
     * The distance from the resolved accent fill color for the focus state of the accent-fill recipe. See {@link @microsoft/fast-components#accentFillFocus} for usage in CSS.
     *
     * @remarks
     * HTML attribute: accent-fill-focus-delta
     *
     * CSS custom property: N/A
     */
    accentFillFocusDelta?: number;
    /**
     * The distance from the resolved accent foreground color for the rest state of the accent-foreground recipe. See {@link @microsoft/fast-components#accentForegroundRest} for usage in CSS.
     *
     * @remarks
     * HTML attribute: accent-foreground-rest-delta
     *
     * CSS custom property: N/A
     */
    accentForegroundRestDelta?: number;
    /**
     * The distance from the resolved accent foreground color for the hover state of the accent-foreground recipe. See {@link @microsoft/fast-components#accentForegroundHover} for usage in CSS.
     *
     * @remarks
     * HTML attribute: accent-foreground-hover-delta
     *
     * CSS custom property: N/A
     */
    accentForegroundHoverDelta?: number;
    /**
     * The distance from the resolved accent foreground color for the active state of the accent-foreground recipe. See {@link @microsoft/fast-components#accentForegroundActive} for usage in CSS.
     *
     * @remarks
     * HTML attribute: accent-foreground-active-delta
     *
     * CSS custom property: N/A
     */
    accentForegroundActiveDelta?: number;
    /**
     * The distance from the resolved accent foreground color for the focus state of the accent-foreground recipe. See {@link @microsoft/fast-components#accentForegroundFocus} for usage in CSS.
     *
     * @remarks
     * HTML attribute: accent-foreground-focus-delta
     *
     * CSS custom property: N/A
     */
    accentForegroundFocusDelta?: number;
    /**
     * The distance from the resolved neutral fill color for the rest state of the neutral-fill recipe. See {@link @microsoft/fast-components#neutralFillRest} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-rest-delta
     *
     * CSS custom property: N/A
     */
    neutralFillRestDelta?: number;
    /**
     * The distance from the resolved neutral fill color for the hover state of the neutral-fill recipe. See {@link @microsoft/fast-components#neutralFillHover} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-hover-delta
     *
     * CSS custom property: N/A
     */
    neutralFillHoverDelta?: number;
    /**
     * The distance from the resolved neutral fill color for the active state of the neutral-fill recipe. See {@link @microsoft/fast-components#neutralFillActive} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-active-delta
     *
     * CSS custom property: N/A
     */
    neutralFillActiveDelta?: number;
    /**
     * The distance from the resolved neutral fill color for the focus state of the neutral-fill recipe. See {@link @microsoft/fast-components#neutralFillFocus} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-focus-delta
     *
     * CSS custom property: N/A
     */
    neutralFillFocusDelta?: number;
    /**
     * The distance from the resolved neutral fill input color for the rest state of the neutral-fill-input recipe. See {@link @microsoft/fast-components#neutralFillInputRest} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-input-rest-delta
     *
     * CSS custom property: N/A
     */
    neutralFillInputRestDelta?: number;
    /**
     * The distance from the resolved neutral fill input color for the hover state of the neutral-fill-input recipe. See {@link @microsoft/fast-components#neutralFillInputHover} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-input-hover-delta
     *
     * CSS custom property: N/A
     */
    neutralFillInputHoverDelta?: number;
    /**
     * The distance from the resolved neutral fill input color for the active state of the neutral-fill-input recipe. See {@link @microsoft/fast-components#neutralFillInputActive} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-input-active-delta
     *
     * CSS custom property: N/A
     */
    neutralFillInputActiveDelta?: number;
    /**
     * The distance from the resolved neutral fill input color for the focus state of the neutral-fill-input recipe. See {@link @microsoft/fast-components#neutralFillInputFocus} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-input-focus-delta
     *
     * CSS custom property: N/A
     */
    neutralFillInputFocusDelta?: number;
    /**
     * The distance from the resolved neutral fill stealth color for the rest state of the neutral-fill-stealth recipe. See {@link @microsoft/fast-components#neutralFillStealthRest} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-stealth-rest-delta
     *
     * CSS custom property: N/A
     */
    neutralFillStealthRestDelta?: number;
    /**
     * The distance from the resolved neutral fill stealth color for the hover state of the neutral-fill-stealth recipe. See {@link @microsoft/fast-components#neutralFillStealthHover} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-stealth-hover-delta
     *
     * CSS custom property: N/A
     */
    neutralFillStealthHoverDelta?: number;
    /**
     * The distance from the resolved neutral fill stealth color for the active state of the neutral-fill-stealth recipe. See {@link @microsoft/fast-components#neutralFillStealthActive} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-stealth-active-delta
     *
     * CSS custom property: N/A
     */
    neutralFillStealthActiveDelta?: number;
    /**
     * The distance from the resolved neutral fill stealth color for the focus state of the neutral-fill-stealth recipe. See {@link @microsoft/fast-components#neutralFillStealthFocus} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-stealth-focus-delta
     *
     * CSS custom property: N/A
     */
    neutralFillStealthFocusDelta?: number;
    /**
     * The distance from the resolved neutral fill strong color for the hover state of the neutral-fill-strong recipe. See {@link @microsoft/fast-components#neutralFillStrongHover} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-strong-hover-delta
     *
     * CSS custom property: N/A
     */
    neutralFillStrongHoverDelta?: number;
    /**
     * The distance from the resolved neutral fill strong color for the active state of the neutral-fill-strong recipe. See {@link @microsoft/fast-components#neutralFillStrongActive} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-strong-active-delta
     *
     * CSS custom property: N/A
     */
    neutralFillStrongActiveDelta?: number;
    /**
     * The distance from the resolved neutral fill strong color for the focus state of the neutral-fill-strong recipe. See {@link @microsoft/fast-components#neutralFillStrongFocus} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-strong-focus-delta
     *
     * CSS custom property: N/A
     */
    neutralFillStrongFocusDelta?: number;
    /**
     * The {@link https://www.w3.org/WAI/GL/wiki/Relative_luminance#:~:text=WCAG%20definition%20of%20relative%20luminance,and%201%20for%20lightest%20white|relative luminance} of the base layer of the application.
     *
     * @remarks
     * When set to a number between 0 and 1, this values controls the output of {@link @microsoft/fast-components#neutralFillLayerRest}, {@link @microsoft/fast-components#neutralLayerCardContainer}, {@link @microsoft/fast-components#neutralLayerFloating}, {@link @microsoft/fast-components#neutralLayer1}, {@link @microsoft/fast-components#neutralLayer2}, {@link @microsoft/fast-components#neutralLayer3}, {@link @microsoft/fast-components#neutralLayer4}.
     *
     * HTML attribute: base-layer-luminance
     *
     * CSS custom property: N/A
     */
    baseLayerLuminance?: number;
    /**
     * The distance from the background-color to resolve the card background. See {@link @microsoft/fast-components#neutralFillLayerRest} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-fill-layer-rest-delta
     *
     * CSS custom property: N/A
     */
    neutralFillLayerRestDelta?: number;
    /**
     * The distance from the resolved neutral divider color for the rest state of the neutral-foreground recipe. See {@link @microsoft/fast-components#neutralStrokeDividerRest} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-stroke-divider-rest-delta
     *
     * CSS custom property: N/A
     */
    neutralStrokeDividerRestDelta?: number;
    /**
     * The distance from the resolved neutral stroke color for the rest state of the neutral-stroke recipe. See {@link @microsoft/fast-components#neutralStrokeRest} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-stroke-rest-delta
     *
     * CSS custom property: N/A
     */
    neutralStrokeRestDelta?: number;
    /**
     * The distance from the resolved neutral stroke color for the hover state of the neutral-stroke recipe. See {@link @microsoft/fast-components#neutralStrokeHover} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-stroke-hover-delta
     *
     * CSS custom property: N/A
     */
    neutralStrokeHoverDelta?: number;
    /**
     * The distance from the resolved neutral stroke color for the active state of the neutral-stroke recipe. See {@link @microsoft/fast-components#neutralStrokeActive} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-stroke-active-delta
     *
     * CSS custom property: N/A
     */
    neutralStrokeActiveDelta?: number;
    /**
     * The distance from the resolved neutral stroke color for the focus state of the neutral-stroke recipe. See {@link @microsoft/fast-components#neutralStrokeFocus} for usage in CSS.
     *
     * @remarks
     * HTML attribute: neutral-stroke-focus-delta
     *
     * CSS custom property: N/A
     */
    neutralStrokeFocusDelta?: number;
}

/**
 * Styles for DesignSystemProvider.
 * @public
 */
export declare const designSystemProviderStyles: (context: ElementDefinitionContext, definition: FoundationElementDefinition) => ElementStyles;

/**
 * Template for DesignSystemProvider.
 * @public
 */
export declare const designSystemProviderTemplate: (context: ElementDefinitionContext, definition: FoundationElementDefinition) => ViewTemplate<any, any>;

/** @public */
export declare const designUnit: CSSDesignToken<number>;

export { Dialog }

/**
 * Styles for Dialog
 * @public
 */
export declare const dialogStyles: FoundationElementTemplate<ElementStyles>;

/** @public */
export declare const direction: CSSDesignToken<Direction>;

/**
 * Behavior to conditionally apply LTR and RTL stylesheets. To determine which to apply,
 * the behavior will use the nearest DesignSystemProvider's 'direction' design system value.
 *
 * @public
 * @example
 * ```ts
 * import { css } from "@microsoft/fast-element";
 * import { DirectionalStyleSheetBehavior } from "@microsoft/fast-foundation";
 *
 * css`
 *  // ...
 * `.withBehaviors(new DirectionalStyleSheetBehavior(
 *   css`:host { content: "ltr"}`),
 *   css`:host { content: "rtl"}`),
 * )
 * ```
 */
export declare class DirectionalStyleSheetBehavior implements Behavior {
    private ltr;
    private rtl;
    private cache;
    constructor(ltr: ElementStyles | null, rtl: ElementStyles | null);
    /**
     * @internal
     */
    bind(source: FASTElement & HTMLElement): void;
    /**
     * @internal
     */
    unbind(source: FASTElement & HTMLElement): void;
    private attach;
}

/** @public */
export declare const disabledOpacity: CSSDesignToken<number>;

/**
 * @internal
 */
export declare class Disclosure extends Disclosure_2 {
    /**
     * Disclosure default height
     */
    private height;
    /**
     * Disclosure height after it's expanded
     */
    private totalHeight;
    connectedCallback(): void;
    /**
     * The appearance the anchor should have.
     *
     * @public
     * @remarks
     * HTML Attribute: appearance
     */
    appearance?: DisclosureAppearance;
    appearanceChanged(oldValue: DisclosureAppearance, newValue: DisclosureAppearance): void;
    /**
     * Set disclosure height while transitioning
     * @override
     */
    protected onToggle(): void;
    /**
     * Calculate disclosure height before and after expanded
     * @override
     */
    protected setup(): void;
    get disclosureHeight(): number;
}

/**
 * Types of anchor appearance.
 * @public
 */
export declare type DisclosureAppearance = "accent" | "lightweight";

/**
 * Styles for Disclosure
 * @public
 */
export declare const disclosureStyles: FoundationElementTemplate<ElementStyles>;

export { Divider }

/**
 * Styles for Divider
 * @public
 */
export declare const dividerStyles: FoundationElementTemplate<ElementStyles>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Accordion} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#accordionTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-accordion>`
 */
export declare const fastAccordion: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Accordion, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Accordion, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof Accordion>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#AccordionItem} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#accordionItemTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-accordion-item>`
 */
export declare const fastAccordionItem: (overrideDefinition?: OverrideFoundationElementDefinition<AccordionItemOptions> | undefined) => FoundationElementRegistry<AccordionItemOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Anchor} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#anchorTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-anchor>`
 *
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/delegatesFocus | delegatesFocus}
 */
export declare const fastAnchor: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
baseClass: typeof Anchor_2;
template: FoundationElementTemplate<ViewTemplate<Anchor_2, any>, AnchorOptions>;
styles: FoundationElementTemplate<ElementStyles, AnchorOptions>;
shadowOptions: {
delegatesFocus: true;
};
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
baseClass: typeof Anchor_2;
template: FoundationElementTemplate<ViewTemplate<Anchor_2, any>, AnchorOptions>;
styles: FoundationElementTemplate<ElementStyles, AnchorOptions>;
shadowOptions: {
delegatesFocus: true;
};
}, typeof Anchor>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#AnchoredRegion} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#anchoredRegionTemplate}
 *
 *
 * @beta
 * @remarks
 * Generates HTML Element: `<fast-anchored-region>`
 */
export declare const fastAnchoredRegion: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<AnchoredRegion, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<AnchoredRegion, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof AnchoredRegion>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Avatar} registration for configuring the component with a DesignSystem.
 *  {@link @microsoft/fast-foundation#avatarTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-avatar>`
 */
export declare const fastAvatar: (overrideDefinition?: OverrideFoundationElementDefinition<AvatarOptions> | undefined) => FoundationElementRegistry<AvatarOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Badge} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#badgeTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-badge>`
 */
export declare const fastBadge: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Badge, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Badge, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof Badge>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Breadcrumb} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#breadcrumbTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-breadcrumb>`
 */
export declare const fastBreadcrumb: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Breadcrumb, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Breadcrumb, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof Breadcrumb>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#BreadcrumbItem} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#breadcrumbItemTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-breadcrumb-item>`
 */
export declare const fastBreadcrumbItem: (overrideDefinition?: OverrideFoundationElementDefinition<BreadcrumbItemOptions> | undefined) => FoundationElementRegistry<BreadcrumbItemOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Button} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#buttonTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-button>`
 *
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/delegatesFocus | delegatesFocus}
 */
export declare const fastButton: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
baseClass: typeof Button_2;
template: FoundationElementTemplate<ViewTemplate<Button_2, any>, ButtonOptions>;
styles: FoundationElementTemplate<ElementStyles, ButtonOptions>;
shadowOptions: {
delegatesFocus: true;
};
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
baseClass: typeof Button_2;
template: FoundationElementTemplate<ViewTemplate<Button_2, any>, ButtonOptions>;
styles: FoundationElementTemplate<ElementStyles, ButtonOptions>;
shadowOptions: {
delegatesFocus: true;
};
}, typeof Button>;

/**
 * The FAST Calendar Element. Implements {@link @microsoft/fast-foundation#Calendar},
 * {@link @microsoft/fast-foundation#calendarTemplate}
 *
 *
 * @public
 * @remarks
 * HTML Element: `<fast-calendar>`
 */
export declare const fastCalendar: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Calendar, any>, CalendarOptions>;
styles: ElementStyles;
title: ViewTemplate<Calendar, any>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Calendar, any>, CalendarOptions>;
styles: ElementStyles;
title: ViewTemplate<Calendar, any>;
}, typeof Calendar>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Card} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#cardTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-card>`
 */
export declare const fastCard: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
baseClass: typeof Card_2;
template: FoundationElementTemplate<ViewTemplate<Card_2, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
baseClass: typeof Card_2;
template: FoundationElementTemplate<ViewTemplate<Card_2, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof Card>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Checkbox} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#checkboxTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-checkbox>`
 */
export declare const fastCheckbox: (overrideDefinition?: OverrideFoundationElementDefinition<CheckboxOptions> | undefined) => FoundationElementRegistry<CheckboxOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Combobox} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#comboboxTemplate}
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-combobox>`
 *
 */
export declare const fastCombobox: (overrideDefinition?: OverrideFoundationElementDefinition<ComboboxOptions> | undefined) => FoundationElementRegistry<ComboboxOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#DataGrid} registration for configuring the component with a DesignSystem.
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-data-grid>`
 */
export declare const fastDataGrid: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<DataGrid, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<DataGrid, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof DataGrid>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#DataGridCell} registration for configuring the component with a DesignSystem.
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-data-grid-cell>`
 */
export declare const fastDataGridCell: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<DataGridCell, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<DataGridCell, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof DataGridCell>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#DataGridRow} registration for configuring the component with a DesignSystem.
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-data-grid-row>`
 */
export declare const fastDataGridRow: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<DataGridRow, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<DataGridRow, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof DataGridRow>;

/**
 * A function that returns a {@link DesignSystemProvider} registration for configuring the component with a DesignSystem.
 * @public
 * @remarks
 * Generates HTML Element: `<fast-design-system-provider>`
 */
export declare const fastDesignSystemProvider: (overrideDefinition?: OverrideFoundationElementDefinition<FoundationElementDefinition> | undefined) => FoundationElementRegistry<FoundationElementDefinition, typeof DesignSystemProvider>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Dialog} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#dialogTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-dialog>`
 */
export declare const fastDialog: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Dialog, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Dialog, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof Dialog>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Disclosure} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#disclosureTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-Disclosure>`
 *
 */
export declare const fastDisclosure: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
baseClass: typeof Disclosure_2;
template: FoundationElementTemplate<ViewTemplate<Disclosure_2, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
baseClass: typeof Disclosure_2;
template: FoundationElementTemplate<ViewTemplate<Disclosure_2, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof Disclosure>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Divider} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#dividerTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-divider>`
 */
export declare const fastDivider: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Divider, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Divider, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof Divider>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Flipper} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#flipperTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-flipper>`
 */
export declare const fastFlipper: (overrideDefinition?: OverrideFoundationElementDefinition<FlipperOptions> | undefined) => FoundationElementRegistry<FlipperOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#HorizontalScroll} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#horizontalScrollTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-horizontal-scroll>`
 */
export declare const fastHorizontalScroll: (overrideDefinition?: OverrideFoundationElementDefinition<HorizontalScrollOptions> | undefined) => FoundationElementRegistry<HorizontalScrollOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#ListboxElement} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#listboxTemplate}
 *
 * @remarks
 * Generates HTML Element: `<fast-listbox>`
 *
 * @public
 *
 */
export declare const fastListbox: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
baseClass: typeof ListboxElement;
template: FoundationElementTemplate<ViewTemplate<ListboxElement, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
baseClass: typeof ListboxElement;
template: FoundationElementTemplate<ViewTemplate<ListboxElement, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof Listbox>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Menu} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#menuTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-menu>`
 */
export declare const fastMenu: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Menu_2, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Menu_2, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof Menu>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#MenuItem} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#menuItemTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-menu-item>`
 */
export declare const fastMenuItem: (overrideDefinition?: OverrideFoundationElementDefinition<MenuItemOptions> | undefined) => FoundationElementRegistry<MenuItemOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#NumberField} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#numberFieldTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-number-field>`
 *
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/delegatesFocus | delegatesFocus}
 */
export declare const fastNumberField: (overrideDefinition?: OverrideFoundationElementDefinition<NumberFieldOptions> | undefined) => FoundationElementRegistry<NumberFieldOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#ListboxOption} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#listboxOptionTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-option>`
 *
 */
export declare const fastOption: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<ListboxOption, any>, ListboxOptionOptions>;
styles: FoundationElementTemplate<ElementStyles, ListboxOptionOptions>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<ListboxOption, any>, ListboxOptionOptions>;
styles: FoundationElementTemplate<ElementStyles, ListboxOptionOptions>;
}, typeof ListboxOption>;

/**
 * The FAST  Picker Custom Element. Implements {@link @microsoft/fast-foundation#Picker},
 * {@link @microsoft/fast-foundation#PickerTemplate}
 *
 *
 * @alpha
 * @remarks
 * * Generates HTML Element: `<fast-picker>`
 */
export declare const fastPicker: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Picker, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
shadowOptions: {};
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Picker, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
shadowOptions: {};
}, typeof Picker>;

/**
 * Component that displays the list of selected picker items along
 * with the input combobox
 *
 * @alpha
 * @remarks
 * HTML Element: \<fast-picker-list\>
 *
 */
export declare const fastPickerList: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<PickerList, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<PickerList, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof PickerList>;

/**
 * Component that displays selected items
 *
 * @alpha
 * @remarks
 * HTML Element: \<fast-picker-list-item\>
 */
export declare const fastPickerListItem: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<PickerListItem, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<PickerListItem, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof PickerListItem>;

/**
 * Component that displays the list of available picker options
 *
 *
 * @alpha
 * @remarks
 * HTML Element: \<fast-picker-menu\>
 */
export declare const fastPickerMenu: (overrideDefinition?: OverrideFoundationElementDefinition<FoundationElementDefinition> | undefined) => FoundationElementRegistry<FoundationElementDefinition, Constructable<FoundationElement>>;

/**
 *  Component that displays available picker menu options
 *
 *
 * @alpha
 * @remarks
 * HTML Element: \<fast-picker-menu-option\>
 */
export declare const fastPickerMenuOption: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<PickerMenuOption, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<PickerMenuOption, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof PickerMenuOption>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#BaseProgress} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#progressTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-progress>`
 */
export declare const fastProgress: (overrideDefinition?: OverrideFoundationElementDefinition<ProgressOptions> | undefined) => FoundationElementRegistry<ProgressOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#BaseProgress} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#progressRingTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-progress-ring>`
 */
export declare const fastProgressRing: (overrideDefinition?: OverrideFoundationElementDefinition<ProgressRingOptions> | undefined) => FoundationElementRegistry<ProgressRingOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Radio} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#radioTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-radio>`
 */
export declare const fastRadio: (overrideDefinition?: OverrideFoundationElementDefinition<RadioOptions> | undefined) => FoundationElementRegistry<RadioOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#RadioGroup} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#radioGroupTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-radio-group>`
 */
export declare const fastRadioGroup: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<RadioGroup, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<RadioGroup, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof RadioGroup>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Search} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#searchTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: \<fast-search\>
 *
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/delegatesFocus | delegatesFocus}
 */
export declare const fastSearch: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
baseClass: typeof Search_2;
template: FoundationElementTemplate<ViewTemplate<Search_2, any>, SearchOptions>;
styles: FoundationElementTemplate<ElementStyles, TextFieldOptions>;
shadowOptions: {
delegatesFocus: true;
};
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
baseClass: typeof Search_2;
template: FoundationElementTemplate<ViewTemplate<Search_2, any>, SearchOptions>;
styles: FoundationElementTemplate<ElementStyles, TextFieldOptions>;
shadowOptions: {
delegatesFocus: true;
};
}, typeof Search>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Select} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#selectTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-select>`
 *
 */
export declare const fastSelect: (overrideDefinition?: OverrideFoundationElementDefinition<SelectOptions> | undefined) => FoundationElementRegistry<SelectOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Skeleton} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#skeletonTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-skeleton>`
 */
export declare const fastSkeleton: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Skeleton, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Skeleton, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof Skeleton>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Slider} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#sliderTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-slider>`
 */
export declare const fastSlider: (overrideDefinition?: OverrideFoundationElementDefinition<SliderOptions> | undefined) => FoundationElementRegistry<SliderOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#SliderLabel} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#sliderLabelTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-slider-label>`
 */
export declare const fastSliderLabel: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
baseClass: typeof SliderLabel_2;
template: FoundationElementTemplate<ViewTemplate<SliderLabel_2, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
baseClass: typeof SliderLabel_2;
template: FoundationElementTemplate<ViewTemplate<SliderLabel_2, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof SliderLabel>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Switch} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#switchTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-switch>`
 */
export declare const fastSwitch: (overrideDefinition?: OverrideFoundationElementDefinition<SwitchOptions> | undefined) => FoundationElementRegistry<SwitchOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Tab} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#tabTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-tab>`
 */
export declare const fastTab: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Tab, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Tab, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof Tab>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#TabPanel} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#tabPanelTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-tab-panel>`
 */
export declare const fastTabPanel: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<TabPanel, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<TabPanel, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof TabPanel>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Tabs} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#tabsTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-tabs>`
 */
export declare const fastTabs: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Tabs, any>, TabsOptions>;
styles: FoundationElementTemplate<ElementStyles, TabsOptions>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<Tabs, any>, TabsOptions>;
styles: FoundationElementTemplate<ElementStyles, TabsOptions>;
}, typeof Tabs>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#TextArea} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#textAreaTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-text-area>`
 *
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/delegatesFocus | delegatesFocus}
 */
export declare const fastTextArea: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
baseClass: typeof TextArea_2;
template: FoundationElementTemplate<ViewTemplate<TextArea_2, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
shadowOptions: {
delegatesFocus: true;
};
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
baseClass: typeof TextArea_2;
template: FoundationElementTemplate<ViewTemplate<TextArea_2, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
shadowOptions: {
delegatesFocus: true;
};
}, typeof TextArea>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#TextField} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#textFieldTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-text-field>`
 *
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/delegatesFocus | delegatesFocus}
 */
export declare const fastTextField: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
baseClass: typeof TextField_2;
template: FoundationElementTemplate<ViewTemplate<TextField_2, any>, TextFieldOptions>;
styles: FoundationElementTemplate<ElementStyles, TextFieldOptions>;
shadowOptions: {
delegatesFocus: true;
};
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
baseClass: typeof TextField_2;
template: FoundationElementTemplate<ViewTemplate<TextField_2, any>, TextFieldOptions>;
styles: FoundationElementTemplate<ElementStyles, TextFieldOptions>;
shadowOptions: {
delegatesFocus: true;
};
}, typeof TextField>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Toolbar} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#toolbarTemplate}
 *
 * @public
 * @remarks
 *
 * Generates HTML Element: `<fast-toolbar>`
 *
 */
export declare const fastToolbar: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
baseClass: typeof Toolbar_2;
template: FoundationElementTemplate<ViewTemplate<Toolbar_2, any>, ToolbarOptions>;
styles: FoundationElementTemplate<ElementStyles, ToolbarOptions>;
shadowOptions: {
delegatesFocus: true;
};
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
baseClass: typeof Toolbar_2;
template: FoundationElementTemplate<ViewTemplate<Toolbar_2, any>, ToolbarOptions>;
styles: FoundationElementTemplate<ElementStyles, ToolbarOptions>;
shadowOptions: {
delegatesFocus: true;
};
}, typeof Toolbar>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#Tooltip} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#tooltipTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-tooltip>`
 */
export declare const fastTooltip: (overrideDefinition?: OverrideFoundationElementDefinition<FoundationElementDefinition> | undefined) => FoundationElementRegistry<FoundationElementDefinition, typeof Tooltip>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#TreeItem} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#treeItemTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-tree-item>`
 *
 */
export declare const fastTreeItem: (overrideDefinition?: OverrideFoundationElementDefinition<TreeItemOptions> | undefined) => FoundationElementRegistry<TreeItemOptions, Constructable<FoundationElement>>;

/**
 * A function that returns a {@link @microsoft/fast-foundation#TreeView} registration for configuring the component with a DesignSystem.
 * Implements {@link @microsoft/fast-foundation#treeViewTemplate}
 *
 *
 * @public
 * @remarks
 * Generates HTML Element: `<fast-tree-view>`
 *
 */
export declare const fastTreeView: (overrideDefinition?: OverrideFoundationElementDefinition<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<TreeView, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}> | undefined) => FoundationElementRegistry<    {
baseName: string;
template: FoundationElementTemplate<ViewTemplate<TreeView, any>, FoundationElementDefinition>;
styles: FoundationElementTemplate<ElementStyles, FoundationElementDefinition>;
}, typeof TreeView>;

/** @public */
export declare const fillColor: CSSDesignToken<Swatch>;

export { Flipper }

/**
 * Styles for Flipper
 * @public
 */
export declare const flipperStyles: FoundationElementTemplate<ElementStyles, FlipperOptions>;

/** @public */
export declare const focusStrokeInner: CSSDesignToken<Swatch>;

/** @public */
export declare const focusStrokeInnerRecipe: DesignToken<ColorRecipe>;

/** @public */
export declare const focusStrokeOuter: CSSDesignToken<Swatch>;

/** @public */
export declare const focusStrokeOuterRecipe: DesignToken<ColorRecipe>;

/** @public */
export declare const focusStrokeWidth: CSSDesignToken<number>;

/** @public */
export declare const foregroundOnAccentActive: CSSDesignToken<Swatch>;

/** @public */
export declare const foregroundOnAccentActiveLarge: CSSDesignToken<Swatch>;

/** @public */
export declare const foregroundOnAccentFocus: CSSDesignToken<Swatch>;

/** @public */
export declare const foregroundOnAccentFocusLarge: CSSDesignToken<Swatch>;

/** @public */
export declare const foregroundOnAccentHover: CSSDesignToken<Swatch>;

/** @public */
export declare const foregroundOnAccentHoverLarge: CSSDesignToken<Swatch>;

/** @public */
export declare const foregroundOnAccentLargeRecipe: DesignToken<ColorRecipe>;

/** @public */
export declare const foregroundOnAccentRecipe: DesignToken<ColorRecipe>;

/** @public */
export declare const foregroundOnAccentRest: CSSDesignToken<Swatch>;

/** @public */
export declare const foregroundOnAccentRestLarge: CSSDesignToken<Swatch>;

/**
 * Creates a PaletteRGB from a source color object.
 * @param source - The source color
 */
declare function from(source: SwatchRGB): PaletteRGB;

declare function from(source: Record<"r" | "g" | "b", number>): PaletteRGB;

/**
 * The control height formula expressed as a design token.
 * This token does not provide a CSS custom property.
 *
 * @public
 */
export declare const heightNumberAsToken: DesignToken<number>;

/**
 * @internal
 */
export declare class HorizontalScroll extends HorizontalScroll_2 {
    /**
     * @public
     */
    connectedCallback(): void;
}

/**
 * Horizontal Scroll styles
 * @public
 */
export declare const horizontalScrollStyles: FoundationElementTemplate<ElementStyles, HorizontalScrollOptions>;

/**
 * Styles for Horizontal Slider label
 * @public
 */
export declare const horizontalSliderLabelStyles: ElementStyles;

/**
 * The FAST Avatar Template for Images
 *  @public
 *
 */
export declare const imgTemplate: ViewTemplate<Avatar, any>;

/** @public */
export declare interface InteractiveColorRecipe {
    evaluate(element: HTMLElement, reference?: Swatch): InteractiveSwatchSet;
}

/** @public */
export declare interface InteractiveSwatchSet {
    /**
     * The swatch to apply to the rest state
     */
    rest: Swatch;
    /**
     * The swatch to apply to the hover state
     */
    hover: Swatch;
    /**
     * The swatch to apply to the active state
     */
    active: Swatch;
    /**
     * The swatch to apply to the focus state
     */
    focus: Swatch;
}

/**
 * Determines if a color should be considered Dark Mode
 * @param color - The color to check to mode of
 * @returns boolean
 *
 * @public
 */
export declare function isDark(color: Swatch): boolean;

/**
 * Base class for Listbox.
 *
 * @public
 */
export declare class Listbox extends ListboxElement {
    /**
     * An internal stylesheet to hold calculated CSS custom properties.
     *
     * @internal
     */
    private computedStylesheet?;
    /**
     * Updates the component dimensions when the size property is changed.
     *
     * @param prev - the previous size value
     * @param next - the current size value
     *
     * @internal
     */
    protected sizeChanged(prev: number | undefined, next: number): void;
    /**
     * Updates an internal stylesheet with calculated CSS custom properties.
     *
     * @internal
     */
    protected updateComputedStylesheet(): void;
}

export { ListboxOption }

/**
 * Styles for Listbox
 * @public
 */
export declare const listboxStyles: FoundationElementTemplate<ElementStyles>;

/**
 * @public
 */
export declare class Menu extends Menu_2 {
    /**
     * @internal
     */
    connectedCallback(): void;
}

export { MenuItem }

/**
 * Styles for Menu item
 * @public
 */
export declare const menuItemStyles: FoundationElementTemplate<ElementStyles, MenuItemOptions>;

/**
 * Styles for Menu
 * @public
 */
export declare const menuStyles: FoundationElementTemplate<ElementStyles>;

/** @public */
export declare const neutralColor: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillActive: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillActiveDelta: DesignToken<number>;

/** @public */
export declare const neutralFillFocus: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillFocusDelta: DesignToken<number>;

/** @public */
export declare const neutralFillHover: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillHoverDelta: DesignToken<number>;

/** @public */
export declare const neutralFillInputActive: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillInputActiveDelta: DesignToken<number>;

/** @public */
export declare const neutralFillInputFocus: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillInputFocusDelta: DesignToken<number>;

/** @public */
export declare const neutralFillInputHover: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillInputHoverDelta: DesignToken<number>;

/** @public */
export declare const neutralFillInputRecipe: DesignToken<InteractiveColorRecipe>;

/** @public */
export declare const neutralFillInputRest: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillInputRestDelta: DesignToken<number>;

/** @public */
export declare const neutralFillLayerRecipe: DesignToken<ColorRecipe>;

/** @public */
export declare const neutralFillLayerRest: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillLayerRestDelta: DesignToken<number>;

/** @public */
export declare const neutralFillRecipe: DesignToken<InteractiveColorRecipe>;

/** @public */
export declare const neutralFillRest: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillRestDelta: DesignToken<number>;

/** @public */
export declare const neutralFillStealthActive: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillStealthActiveDelta: DesignToken<number>;

/** @public */
export declare const neutralFillStealthFocus: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillStealthFocusDelta: DesignToken<number>;

/** @public */
export declare const neutralFillStealthHover: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillStealthHoverDelta: DesignToken<number>;

/** @public */
export declare const neutralFillStealthRecipe: DesignToken<InteractiveColorRecipe>;

/** @public */
export declare const neutralFillStealthRest: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillStealthRestDelta: DesignToken<number>;

/** @public */
export declare const neutralFillStrongActive: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillStrongActiveDelta: DesignToken<number>;

/** @public */
export declare const neutralFillStrongFocus: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillStrongFocusDelta: DesignToken<number>;

/** @public */
export declare const neutralFillStrongHover: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillStrongHoverDelta: DesignToken<number>;

/** @public */
export declare const neutralFillStrongRecipe: DesignToken<InteractiveColorRecipe>;

/** @public */
export declare const neutralFillStrongRest: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralFillStrongRestDelta: DesignToken<number>;

/** @public */
export declare const neutralForegroundHint: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralForegroundHintRecipe: DesignToken<ColorRecipe>;

/** @public */
export declare const neutralForegroundRecipe: DesignToken<ColorRecipe>;

/** @public */
export declare const neutralForegroundRest: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralLayer1: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralLayer1Recipe: DesignToken<ColorRecipe>;

/** @public */
export declare const neutralLayer2: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralLayer2Recipe: DesignToken<ColorRecipe>;

/** @public */
export declare const neutralLayer3: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralLayer3Recipe: DesignToken<ColorRecipe>;

/** @public */
export declare const neutralLayer4: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralLayer4Recipe: DesignToken<ColorRecipe>;

/** @public */
export declare const neutralLayerCardContainer: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralLayerCardContainerRecipe: DesignToken<ColorRecipe>;

/** @public */
export declare const neutralLayerFloating: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralLayerFloatingRecipe: DesignToken<ColorRecipe>;

/** @public */
export declare const neutralPalette: DesignToken<Palette<Swatch>>;

/** @public */
export declare const neutralStrokeActive: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralStrokeActiveDelta: DesignToken<number>;

/** @public */
export declare const neutralStrokeDividerRecipe: DesignToken<ColorRecipe>;

/** @public */
export declare const neutralStrokeDividerRest: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralStrokeDividerRestDelta: DesignToken<number>;

/** @public */
export declare const neutralStrokeFocus: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralStrokeFocusDelta: DesignToken<number>;

/** @public */
export declare const neutralStrokeHover: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralStrokeHoverDelta: DesignToken<number>;

/** @public */
export declare const neutralStrokeRecipe: DesignToken<InteractiveColorRecipe>;

/** @public */
export declare const neutralStrokeRest: CSSDesignToken<Swatch>;

/** @public */
export declare const neutralStrokeRestDelta: DesignToken<number>;

/**
 * @internal
 */
export declare class NumberField extends NumberField_2 {
    /**
     * The appearance of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: appearance
     */
    appearance: NumberFieldAppearance;
}

/**
 * Number field appearances
 * @public
 */
export declare type NumberFieldAppearance = "filled" | "outline";

/**
 * Styles for Number Field
 * @public
 */
export declare const numberFieldStyles: FoundationElementTemplate<ElementStyles, NumberFieldOptions>;

/**
 * Styles for the {@link @microsoft/fast-components#fastOption | Listbox Option} component.
 *
 * @param context - the element definition context
 * @param definition - the foundation element definition
 * @returns The element styles for the listbox option component
 *
 * @public
 */
export declare const optionStyles: FoundationElementTemplate<ElementStyles, ListboxOptionOptions>;

/**
 * A collection of {@link Swatch} instances
 * @public
 */
export declare interface Palette<T extends Swatch = Swatch> {
    readonly source: T;
    readonly swatches: ReadonlyArray<T>;
    /**
     * Returns a swatch from the palette that most closely matches
     * the contrast ratio provided to a provided reference.
     */
    colorContrast(reference: Swatch, contrast: number, initialIndex?: number, direction?: 1 | -1): T;
    /**
     * Returns the index of the palette that most closely matches
     * the relativeLuminance of the provided swatch
     */
    closestIndexOf(reference: RelativeLuminance): number;
    /**
     * Gets a swatch by index. Index is clamped to the limits
     * of the palette so a Swatch will always be returned.
     */
    get(index: number): T;
}

/** @public */
export declare type PaletteRGB = Palette<SwatchRGB>;

/** @public */
export declare const PaletteRGB: Readonly<{
    create: typeof create;
    from: typeof from;
}>;

export { Picker }

/**
 * Styles for Picker list item
 * @public
 */
export declare const pickerListItemStyles: FoundationElementTemplate<ElementStyles>;

/**
 * @public
 */
export declare class PickerMenu extends PickerMenu_2 {
    /**
     * @public
     */
    connectedCallback(): void;
}

/**
 * Styles for Picker menu option
 * @public
 */
export declare const pickerMenuOptionStyles: FoundationElementTemplate<ElementStyles>;

/**
 * Styles for Picker menu
 * @public
 */
export declare const pickerMenuStyles: FoundationElementTemplate<ElementStyles>;

/**
 * Styles for Picker
 * @public
 */
export declare const pickerStyles: FoundationElementTemplate<ElementStyles>;

/**
 * Styles for Progress Ring
 * @public
 */
export declare const progressRingStyles: FoundationElementTemplate<ElementStyles, ProgressRingOptions>;

/**
 * Styles for Progress
 * @public
 */
export declare const progressStyles: FoundationElementTemplate<ElementStyles, ProgressOptions>;

/**
 * Provides a design system for the specified element either by returning one that was
 * already created for that element or creating one.
 * @param element - The element to root the design system at. By default, this is the body.
 * @returns A FAST Design System
 * @public
 */
export declare function provideFASTDesignSystem(element?: HTMLElement): DesignSystem;

export { Radio }

export { RadioGroup }

/**
 * Styles for Radio Group
 * @public
 */
export declare const radioGroupStyles: FoundationElementTemplate<ElementStyles>;

/**
 * Styles for Radio
 * @public
 */
export declare const radioStyles: FoundationElementTemplate<ElementStyles, RadioOptions>;

/** @public @deprecated Use ColorRecipe instead */
export declare interface Recipe<T> {
    evaluate(element: HTMLElement, reference?: Swatch): T;
}

/**
 * @public
 */
declare interface RelativeLuminance {
    /**
     * A number between 0 and 1, calculated by {@link https://www.w3.org/WAI/GL/wiki/Relative_luminance}
     */
    readonly relativeLuminance: number;
}

/**
 * @internal
 */
export declare class Search extends Search_2 {
    /**
     * The appearance of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: appearance
     */
    appearance: SearchAppearance;
}

/**
 * Search appearances
 * @public
 */
export declare type SearchAppearance = "filled" | "outline";

/**
 * Styles for Search
 * @public
 */
export declare const searchStyles: FoundationElementTemplate<ElementStyles, TextFieldOptions>;

/**
 * Base class for Select.
 * @public
 */
export declare class Select extends Select_2 {
    /**
     * An internal stylesheet to hold calculated CSS custom properties.
     *
     * @internal
     */
    private computedStylesheet?;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * Returns the calculated max height for the listbox.
     *
     * @internal
     * @remarks
     * Used to generate the `--listbox-max-height` CSS custom property.
     *
     */
    private get listboxMaxHeight();
    /**
     * The cached scroll width of the listbox when visible.
     *
     * @internal
     */
    private listboxScrollWidth;
    /**
     * @internal
     */
    protected listboxScrollWidthChanged(): void;
    /**
     * Returns the size value, if any. Otherwise, returns 4 if in
     * multi-selection mode, or 0 if in single-selection mode.
     *
     * @internal
     * @remarks
     * Used to generate the `--size` CSS custom property.
     *
     */
    private get selectSize();
    /**
     * Updates the computed stylesheet when the multiple property changes.
     *
     * @param prev - the previous multiple value
     * @param next - the current multiple value
     *
     * @override
     * @internal
     */
    multipleChanged(prev: boolean | undefined, next: boolean): void;
    /**
     * Sets the selectMaxSize design token when the maxHeight property changes.
     *
     * @param prev - the previous maxHeight value
     * @param next - the current maxHeight value
     *
     * @internal
     */
    protected maxHeightChanged(prev: number | undefined, next: number): void;
    setPositioning(): void;
    /**
     * Updates the component dimensions when the size property is changed.
     *
     * @param prev - the previous size value
     * @param next - the current size value
     *
     * @override
     * @internal
     */
    protected sizeChanged(prev: number | undefined, next: number): void;
    /**
     * Updates an internal stylesheet with calculated CSS custom properties.
     *
     * @internal
     */
    protected updateComputedStylesheet(): void;
}

/**
 * Styles for Select.
 *
 * @public
 */
export declare const selectStyles: FoundationElementTemplate<ElementStyles, SelectOptions>;

export { Skeleton }

/**
 * Styles for Skeleton
 * @public
 */
export declare const skeletonStyles: FoundationElementTemplate<ElementStyles>;

export { Slider }

/**
 * @internal
 */
export declare class SliderLabel extends SliderLabel_2 {
    protected sliderOrientationChanged(): void;
}

/**
 * Styles for Slider Label
 * @public
 */
export declare const sliderLabelStyles: FoundationElementTemplate<ElementStyles>;

/**
 * Styles for Slider
 * @public
 */
export declare const sliderStyles: FoundationElementTemplate<ElementStyles, SliderOptions>;

/**
 * Recommended values for light and dark mode for {@link @microsoft/fast-components#baseLayerLuminance}.
 *
 * @public
 */
export declare const StandardLuminance: {
    readonly LightMode: 1;
    readonly DarkMode: 0.23;
};

/**
 * Types of recommended values for light and dark mode for {@link @microsoft/fast-components#baseLayerLuminance}.
 *
 * @public
 */
export declare type StandardLuminance = typeof StandardLuminance[keyof typeof StandardLuminance];

/** @public */
export declare const strokeWidth: CSSDesignToken<number>;

/**
 * Represents a color in a {@link Palette}
 * @public
 */
export declare interface Swatch extends RelativeLuminance {
    toColorString(): string;
    contrast(target: RelativeLuminance): number;
}

/** @public */
export declare interface SwatchRGB extends Swatch {
    r: number;
    g: number;
    b: number;
}

/** @public */
export declare const SwatchRGB: Readonly<{
    create(r: number, g: number, b: number): SwatchRGB;
    from(obj: {
        r: number;
        g: number;
        b: number;
    }): SwatchRGB;
}>;

export { Switch }

/**
 * Styles for Switch
 * @public
 */
export declare const switchStyles: FoundationElementTemplate<ElementStyles, SwitchOptions>;

export { Tab }

export { TabPanel }

/**
 * Styles for Tab Panel
 * @public
 */
export declare const tabPanelStyles: FoundationElementTemplate<ElementStyles>;

export { Tabs }

/**
 * Styles for Tabs
 * @public
 */
export declare const tabsStyles: FoundationElementTemplate<ElementStyles, TabsOptions>;

/**
 * Styles for Tab
 * @public
 */
export declare const tabStyles: FoundationElementTemplate<ElementStyles>;

/**
 * @internal
 */
export declare class TextArea extends TextArea_2 {
    /**
     * The appearance of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: appearance
     */
    appearance: TextAreaAppearance;
}

/**
 * Text area appearances
 * @public
 */
export declare type TextAreaAppearance = "filled" | "outline";

/**
 * Styles for Text Area
 * @public
 */
export declare const textAreaStyles: FoundationElementTemplate<ElementStyles>;

/**
 * @internal
 */
export declare class TextField extends TextField_2 {
    /**
     * The appearance of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: appearance
     */
    appearance: TextFieldAppearance;
}

/**
 * Text field appearances
 * @public
 */
export declare type TextFieldAppearance = "filled" | "outline";

/**
 * Styles for Text Field
 * @public
 */
export declare const textFieldStyles: FoundationElementTemplate<ElementStyles, TextFieldOptions>;

/**
 * @internal
 */
export declare class Toolbar extends Toolbar_2 {
    connectedCallback(): void;
}

/**
 * Styles for the Toolbar
 *
 * @public
 */
export declare const toolbarStyles: FoundationElementTemplate<ElementStyles, ToolbarOptions>;

export { Tooltip }

/**
 * Styles for Tooltip
 * @public
 */
export declare const tooltipStyles: (context: ElementDefinitionContext, definition: FoundationElementDefinition) => ElementStyles;

export { TreeItem }

/**
 * Styles for Tree Item
 * @public
 */
export declare const treeItemStyles: FoundationElementTemplate<ElementStyles, TreeItemOptions>;

export { TreeView }

/**
 * Styles for Tree View
 * @public
 */
export declare const treeViewStyles: FoundationElementTemplate<ElementStyles>;

/** @public */
export declare const typeRampBaseFontSize: CSSDesignToken<string>;

/** @public */
export declare const typeRampBaseLineHeight: CSSDesignToken<string>;

/** @public */
export declare const typeRampMinus1FontSize: CSSDesignToken<string>;

/** @public */
export declare const typeRampMinus1LineHeight: CSSDesignToken<string>;

/** @public */
export declare const typeRampMinus2FontSize: CSSDesignToken<string>;

/** @public */
export declare const typeRampMinus2LineHeight: CSSDesignToken<string>;

/** @public */
export declare const typeRampPlus1FontSize: CSSDesignToken<string>;

/** @public */
export declare const typeRampPlus1LineHeight: CSSDesignToken<string>;

/** @public */
export declare const typeRampPlus2FontSize: CSSDesignToken<string>;

/** @public */
export declare const typeRampPlus2LineHeight: CSSDesignToken<string>;

/** @public */
export declare const typeRampPlus3FontSize: CSSDesignToken<string>;

/** @public */
export declare const typeRampPlus3LineHeight: CSSDesignToken<string>;

/** @public */
export declare const typeRampPlus4FontSize: CSSDesignToken<string>;

/** @public */
export declare const typeRampPlus4LineHeight: CSSDesignToken<string>;

/** @public */
export declare const typeRampPlus5FontSize: CSSDesignToken<string>;

/** @public */
export declare const typeRampPlus5LineHeight: CSSDesignToken<string>;

/** @public */
export declare const typeRampPlus6FontSize: CSSDesignToken<string>;

/** @public */
export declare const typeRampPlus6LineHeight: CSSDesignToken<string>;

/**
 * Styles for Vertical slider label
 * @public
 */
export declare const verticalSliderLabelStyles: ElementStyles;

export { }
